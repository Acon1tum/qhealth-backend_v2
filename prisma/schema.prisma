// schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql" // Change to your DB provider (e.g., mysql)
  url      = env("DATABASE_URL")
}

// User model for login (Doctors, Patients, Admins)
model User {
  id        Int      @id @default(autoincrement()) // Primary key, auto-incremented ID
  email     String   @unique // Unique email for login authentication
  password  String // Hashed password for secure login
  role      Role // Role to distinguish between doctor, patient, and admin
  createdAt DateTime @default(now()) // Timestamp when user is created
  updatedAt DateTime @updatedAt // Timestamp when user data is updated

  // Relationships
  consultationsAsDoctor  Consultation[]   @relation("DoctorConsultations") // Consultations where the user is the doctor
  consultationsAsPatient Consultation[]   @relation("PatientConsultations") // Consultations where the user is the patient
  doctorInfo             DoctorInfo? // Additional information for doctors (only exists if the user is a doctor)
  patientInfo            PatientInfo? // Additional information for patients (only exists if the user is a patient)
  doctorCategories       DoctorCategory[] @relation("DoctorCategories") // Doctors' categories

  // Additional relations for DoctorSchedule, EmergencyContact, and InsuranceInfo
  doctorSchedules   DoctorSchedule[]
  emergencyContacts EmergencyContact[]
  insuranceInfos    InsuranceInfo[]
  refreshTokens     RefreshToken[] // Refresh tokens for JWT authentication
  
  // Security and audit relations
  auditLogs              AuditLog[] // Audit logs for this user
  securityEvents         SecurityEvent[] // Security events for this user
  resolvedSecurityEvents SecurityEvent[] @relation("ResolvedSecurityEvents") // Security events resolved by this user
}

// Enum for different user roles
enum Role {
  DOCTOR
  PATIENT
  ADMIN
}

// Doctor Category model to categorize doctors by specialization (e.g., Cardiologist, Dermatologist)
model DoctorCategory {
  id          Int     @id @default(autoincrement()) // Primary key, auto-incremented ID
  name        String  @unique // Category name (e.g., Cardiologist, Dermatologist)
  description String? // A short description of the category (optional)
  doctors     User[]  @relation("DoctorCategories") // List of doctors that belong to this category
}

// Doctor Information model for additional details about the doctor
model DoctorInfo {
  id             Int      @id @default(autoincrement()) // Primary key, auto-incremented ID
  userId         Int      @unique // Make userId unique for one-to-one relationship
  firstName      String // Doctor's first name
  middleName     String? // Doctor's middle name (optional)
  lastName       String // Doctor's last name
  gender         Sex // Doctor's gender (Male/Female/Other)
  dateOfBirth    DateTime // Doctor's date of birth
  contactNumber  String // Doctor's contact number
  address        String // Doctor's address
  bio            String // Brief biography of the doctor
  specialization String // Specialization or field of medicine the doctor practices
  qualifications String // Doctorâ€™s qualifications (e.g., MBBS, MD)
  experience     Int // Number of years of experience in the medical field

  user User @relation(fields: [userId], references: [id]) // Relationship to User (Doctor)
}

// Enum for sex
enum Sex {
  MALE
  FEMALE
  OTHER
}

// Doctor Schedule model to manage doctor availability (e.g., availability on specific days and times)
model DoctorSchedule {
  id        Int      @id @default(autoincrement()) // Primary key, auto-incremented ID
  doctorId  Int // Reference to Doctor (User)
  dayOfWeek String // Day of the week the doctor is available (e.g., Monday, Tuesday)
  startTime DateTime // Start time of doctor's availability on this day
  endTime   DateTime // End time of doctor's availability on this day

  doctor User @relation(fields: [doctorId], references: [id]) // Relationship to Doctor (User)
}

// Consultation model that stores consultation details between a doctor and a patient
model Consultation {
  id               Int       @id @default(autoincrement()) // Primary key, auto-incremented ID
  doctorId         Int // Foreign key to User (Doctor)
  patientId        Int // Foreign key to User (Patient)
  startTime        DateTime // The start time of the consultation
  endTime          DateTime? // The end time of the consultation (optional)
  consultationLink String // The unique WebRTC video link for the consultation

  doctor     User        @relation("DoctorConsultations", fields: [doctorId], references: [id]) // Doctor who conducted the consultation
  patient    User        @relation("PatientConsultations", fields: [patientId], references: [id]) // Patient being consulted
  healthScan HealthScan? // Health scan results related to the consultation (optional)
}

// HealthScan model that stores health scan data (e.g., heart rate, stress level, etc.)
model HealthScan {
  id              Int     @id @default(autoincrement()) // Primary key
  consultationId  Int     @unique // Foreign key to Consultation - make unique for one-to-one relation
  bloodPressure   String? // Blood pressure (e.g., 130/80)
  heartRate       Float? // Heart rate in bpm (e.g., 84 bpm)
  spO2            Float? // Oxygen saturation level (e.g., 98%)
  respiratoryRate Float? // Respiratory rate in breaths/min (e.g., 11.7)
  stressLevel     Float? // Stress level score (e.g., 1.9)
  stressScore     Float? // Stress score (e.g., 284.8)
  hrvSdnn         Float? // HRV SDNN (e.g., 43.25 ms)
  hrvRmsdd        Float? // HRV RMSSD (e.g., 42.28 ms)
  generalWellness Float? // General wellness score (e.g., 71.71)

  // Health Risk Assessment
  generalRisk              Float? // General health risk (e.g., 4.8%)
  coronaryHeartDisease     Float? // Coronary heart disease risk (e.g., 2.6%)
  congestiveHeartFailure   Float? // Congestive heart failure risk (e.g., 0.3%)
  intermittentClaudication Float? // Intermittent claudication risk (e.g., 0.75%)
  strokeRisk               Float? // Stroke risk (e.g., 1.5%)

  // COVID-19 Risk
  covidRisk Float? // COVID-19 risk (e.g., 2.8%)

  // Health Parameters (used to calculate diabetes and hypertension risk)
  height                Float? // Height in cm (e.g., 170)
  weight                Float? // Weight in kg (e.g., 65)
  smoker                Boolean? // Whether the person is a smoker (true/false)
  hypertension          Boolean? // Whether the person has hypertension (true/false)
  bpMedication          Boolean? // Whether the person is on blood pressure medication
  diabetic              Int? // Diabetes status: 0 = no diabetes, 1 = prediabetes, 2 = diabetic
  waistCircumference    Float? // Waist circumference in cm (e.g., 80)
  heartDisease          Boolean? // Whether the person has heart disease (true/false)
  depression            Boolean? // Whether the person has depression (true/false)
  totalCholesterol      Float? // Total cholesterol in mg/dL (e.g., 200)
  hdl                   Float? // HDL cholesterol in mg/dL (e.g., 50)
  parentalHypertension  Int? // Parental history of hypertension: 0 = none, 1 = one parent, 2 = both parents
  physicalActivity      Boolean? // Whether the person engages in regular physical activity
  healthyDiet           Boolean? // Whether the person follows a healthy diet
  antiHypertensive      Boolean? // Whether the person uses anti-hypertensive medication
  historyBloodGlucose   Boolean? // Whether the person has a history of high blood glucose
  historyFamilyDiabetes Int? // Family history of diabetes: 0 = none, 1 = one parent/sibling, 2 = both parents/siblings

  consultation Consultation @relation(fields: [consultationId], references: [id]) // Relation to Consultation
}

// Patient Information model to store additional details about the patient
model PatientInfo {
  id               Int               @id @default(autoincrement()) // Primary key
  userId           Int               @unique // Make userId unique for one-to-one relationship
  fullName         String // Full name of the patient
  gender           Sex // Patient's gender (Male/Female/Other)
  dateOfBirth      DateTime // Patient's date of birth
  contactNumber    String // Patient's contact number
  address          String // Patient's address
  weight           Float // Patient's weight (in kg)
  height           Float // Patient's height (in cm)
  bloodType        String // Patient's blood type (e.g., A+, B-)
  emergencyContact EmergencyContact? // Emergency contact info (optional)
  medicalHistory   String? // Patient's medical history (optional)
  allergies        String? // Patient's allergies (optional)
  medications      String? // Current medications (optional)
  insuranceInfo    InsuranceInfo? // Patient's insurance information

  user User @relation(fields: [userId], references: [id]) // Relation to Patient User
}

// Emergency Contact model
model EmergencyContact {
  id             Int     @id @default(autoincrement()) // Primary key
  patientId      Int     @unique // Foreign key to Patient (User) - unique for one-to-one relation
  contactName    String // Emergency contact name
  relationship   String // Relationship to patient (e.g., Mother, Father, Spouse)
  contactNumber  String // Emergency contact number
  contactAddress String? // Emergency contact address (optional)

  patient     User        @relation(fields: [patientId], references: [id], map: "EmergencyContact_patient_fkey") // Relation to Patient
  patientInfo PatientInfo @relation(fields: [patientId], references: [userId]) // Relation to PatientInfo
}

// Insurance Info model
model InsuranceInfo {
  id               Int    @id @default(autoincrement()) // Primary key
  patientId        Int    @unique // Foreign key to Patient (User) - unique for one-to-one relation
  providerName     String // Insurance provider name
  policyNumber     String // Insurance policy number
  insuranceContact String // Insurance contact information (e.g., phone number or email)

  patient     User        @relation(fields: [patientId], references: [id], map: "InsuranceInfo_patient_fkey") // Relation to Patient
  patientInfo PatientInfo @relation(fields: [patientId], references: [userId]) // Relation to PatientInfo
}

// Refresh Token model for JWT refresh tokens
model RefreshToken {
  id        String   @id @default(uuid())
  userId    Int      // Foreign key to User
  token     String   @unique // The actual refresh token string
  expiresAt DateTime // When the token expires
  createdAt DateTime @default(now()) // When the token was created
  
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("refresh_tokens")
}

// Audit Log model for comprehensive activity tracking
model AuditLog {
  id           String         @id @default(uuid())
  userId       Int? // Foreign key to User (nullable for system events)
  action       String // Action performed (e.g., LOGIN, CREATE, UPDATE, DELETE)
  category     AuditCategory // Category of the audit log
  level        AuditLevel // Severity level of the audit log
  description  String // Human-readable description of the action
  ipAddress    String // IP address of the user
  userAgent    String // User agent string
  resourceType String? // Type of resource affected (e.g., USER, CONSULTATION)
  resourceId   String? // ID of the resource affected
  details      Json? // Additional details in JSON format
  timestamp    DateTime @default(now()) // When the action occurred
  severity     String // Severity level as string (low, medium, high, critical)
  
  user User? @relation(fields: [userId], references: [id], onDelete: SetNull)
  
  @@index([userId])
  @@index([timestamp])
  @@index([category])
  @@index([level])
  @@map("audit_logs")
}

// Security Event model for tracking security-related incidents
model SecurityEvent {
  id          String     @id @default(uuid())
  eventType   String // Type of security event (e.g., AUTH_FAILURE, RATE_LIMIT_VIOLATION)
  severity    AuditLevel // Severity level of the security event
  description String // Description of the security event
  ipAddress   String // IP address associated with the event
  userAgent   String // User agent string
  userId      Int? // Foreign key to User (nullable for anonymous events)
  details     Json? // Additional details in JSON format
  timestamp   DateTime @default(now()) // When the event occurred
  resolved    Boolean @default(false) // Whether the security event has been resolved
  resolvedAt  DateTime? // When the event was resolved
  resolvedBy  Int? // User who resolved the event
  
  user       User? @relation(fields: [userId], references: [id], onDelete: SetNull)
  resolvedByUser User? @relation("ResolvedSecurityEvents", fields: [resolvedBy], references: [id], onDelete: SetNull)
  
  @@index([userId])
  @@index([timestamp])
  @@index([eventType])
  @@index([severity])
  @@index([resolved])
  @@map("security_events")
}

// Enums for audit logging
enum AuditCategory {
  AUTHENTICATION
  AUTHORIZATION
  DATA_ACCESS
  DATA_MODIFICATION
  SECURITY
  SYSTEM
  USER_ACTIVITY
}

enum AuditLevel {
  INFO
  WARNING
  ERROR
  CRITICAL
}
